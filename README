# -*- mode:org; mode:auto-fill; fill-column:80; coding:utf-8; -*-
#+title: TMG: A Tibetan Music Generation Project
#+author: Sangjee Dondrub
#+date: \today
#+babel: :cache yes
#+latex_class: note
#+options: toc:nil date:nil
#+creator: Sangjee Dondrub <sangjeedondrub@live.com>
#+latex_header: \subtitle{Yep, Music, You know.}
#+latex_header: \doclangselection{en}
#+latex_header: \usemnote{no}
#+latex_header: \docinstselect{sangjee}

* Table of Contents                                                             :TOC:
- [[#get-started][Get started]]
- [[#ondo-data-collection][ONDO Data Collection]]
- [[#data-preprocessing][Data Preprocessing]]
  - [[#mp3-to-midi][mp3 to midi]]
  - [[#vocal-removing][Vocal removing]]
  - [[#shell-script-to-do-both-removing-vocal-and-midi-conversion][Shell script to do both =removing-vocal= and =midi-conversion=]]
- [[#dataset-class][Dataset Class]]
  - [[#midi-dataset][Midi Dataset]]
  - [[#accompaniment-dataset][Accompaniment Dataset]]
  - [[#audio-text-dataset][Audio-Text Dataset]]
- [[#ondo-baseline-model][ONDO Baseline Model]]
  - [[#music-generation-using-musictransformer-with-codes][Music Generation using MusicTransformer with codes]]
- [[#models][Models]]
- [[#conclusion-on-musictransformer][Conclusion on MusicTransformer]]
- [[#model-training][Model Training]]
- [[#model-evaluation][Model Evaluation]]
- [[#conclusion][Conclusion]]
- [[#references][References]]
  - [[#music-synthesis-as-tts-task][Music synthesis as tts task]]
- [[#bibliography][Bibliography]]

* DONE Get started
CLOSED: [2023-07-09 Sun 23:31]

Python env

#+begin_src sh
poetry env use 3.9
#+end_src

Install dependencies

#+begin_src sh
make depends
#+end_src

Test

#+begin_src sh
make test
#+end_src

Docs

#+begin_src sh
make docs
#+end_src

Pre-commit

#+begin_src sh
make commit
#+end_src

Build Package

#+begin_src sh
make build
#+end_src

* ONDO Data Collection
:LOGBOOK:
CLOCK: [2023-07-10 Mon 00:44]--[2023-07-10 Mon 01:13] =>  0:29
CLOCK: [2023-07-09 Sun 23:29]--[2023-07-09 Sun 23:58] =>  0:29
:END:

http://music.tibet3.com/

#+begin_src sh
scrapy run spider music_crawl/spider/tibet3.py
#+end_src

#+begin_src sh
ls data/mp3 | wc -l
#+end_src

#+RESULTS:
: 247

* Data Preprocessing

** mp3 to midi

Basic Pitch, a free audio-to-MIDI converter with pitch bend detection, built by
Spotify, Learn more at: https://github.com/spotify/basic-pitch

#+begin_src sh
pip install basic-pitch
basic-pitch output-path/ sample.mp3
#+end_src

+ https://github.com/jason9693/midi-neural-processor

#+begin_src sh
ls data/midi/ | wc -l
#+end_src

#+RESULTS:
: 76

** Vocal removing

+ https://vocalremover.org/
+ https://github.com/deezer/spleeter

Change the github host to =ghproxy.com= in =model= module in =spleeter=.

#+begin_src sh
spleeter separate -p spleeter:2stems -o output sample.mp3
#+end_src

** Shell script to do both =removing-vocal= and =midi-conversion=

#+begin_src sh :tangle remove-vocal-and-midi.sh :eval no
for mp3 in data/mp3/*.mp3; do
    echo "Processing $mp3"
    # remove vocals
    spleeter separate -p spleeter:2stems -o data/sep "$mp3"
    fname="${mp3%.*}"
    fname=`basename "$fname"`
    acc="data/sep/$fname/accompaniment.wav"
    mkdir -p data/midi/$fname
    basic-pitch data/midi/$fname "$acc"
    done
done
#+end_src

* Dataset Class

** Midi Dataset
** Accompaniment Dataset
** Audio-Text Dataset

* ONDO Baseline Model
:LOGBOOK:
CLOCK: [2023-07-15 Sat 16:57]
:END:

** [[https://medium.com/data-science-in-your-pocket/music-generation-using-musictransformer-with-codes-c7be89ba85b1][Music Generation using MusicTransformer with codes]]

* Models

+ https://carlosholivan.github.io/DeepLearningMusicGeneration/
+ https://github.com/Khamies/PianoNotes-LSTM-Generation
+ https://www.tensorflow.org/tutorials/audio/music_generation
+ [[https://medium.com/data-science-in-your-pocket/music-generation-using-musictransformer-with-codes-c7be89ba85b1][music generation with transformer]]

* DONE Conclusion on MusicTransformer
CLOSED: [2023-07-16 Sun 21:49]

老师您好,我在一个非常小的数据集(245 条)上做了一个微调,虽然能生成,但是效果不是很
好. 我浏览几篇文章, 发现他们都是使用非常高质量的钢琴曲,交响乐等, 而且规模非常大.

我自己感觉如果直接使用下载的歌曲, 可能效果不会很好. 如果能把下载的歌曲的旋律
(pitch)抽出来, 并对这些旋律做一些操作, 比如: 过滤,正则等, 从而构建质量较高, 比较
能代表藏族歌曲的风格的数据集的话, 应该可以保证音乐生成的能力.

* Model Training

* Model Evaluation

* Conclusion

* References

** Music synthesis as tts task

We got many pairs of lyrics and music audio, why not treat the music synthesis
as a tts task. Give the text, then the music will be generated.

I noticed there a bunch of researching work out there based on this ``tts''
idea, keep exploring.

+ 开源歌声合成系统: https://github.com/xushengyuan/Fastsinging

* Bibliography
:PROPERTIES:
:UNNUMBERED: t
:END:

bibliography:~/roam/bibliography/references.bib,~/roam/bibliography/todo.bib,~/roam/bibliography/done.bib,~/roam/bibliography/book.bib

bibliographystyle:apalike
